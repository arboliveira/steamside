
function $parcel$exportWildcard(dest, source) {
  Object.keys(source).forEach(function(key) {
    if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function get() {
        return source[key];
      }
    });
  });

  return dest;
}

function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $07201b47c5f8d57a$exports = {};

$parcel$export($07201b47c5f8d57a$exports, "Customary", () => $dc3eede01c452bc5$export$7d556906c4a5f4a7);
$parcel$export($07201b47c5f8d57a$exports, "CustomaryElement", () => $98d0f6a447871cb0$export$4a183080d2c522d7);
class $16878b9af4c78a4c$export$2bcc17fb5433cbbf {
    document;
    globalThis;
    constructor(document, globalThis){
        this.document = document;
        this.globalThis = globalThis;
    }
    detect() {
        return this.detectElementNames().map((name)=>this.detectDeclaration(name));
    }
    detectElementNames() {
        const attribute = 'data-customary-name';
        const fromDocument = [
            ...this.document.querySelectorAll(`template[${attribute}]`)
        ].map((template)=>template.getAttribute(attribute));
        const prefix = 'customary:';
        const fromGlobalScope = Object.keys(this.globalThis).filter((name)=>name.startsWith(prefix)).map((name)=>name.substring(prefix.length));
        return [
            ...new Set([
                ...fromDocument,
                ...fromGlobalScope
            ])
        ];
    }
    detectDeclaration(name) {
        const fromGlobalScope = this.globalThis[`customary:${name}`];
        const config = fromGlobalScope?.config;
        const hooks = fromGlobalScope?.hooks;
        const values = fromGlobalScope?.values ?? this.detectValues(name);
        return {
            name: name,
            ...config ? {
                config: config
            } : {},
            ...hooks ? {
                hooks: hooks
            } : {},
            ...values ? {
                values: values
            } : {}
        };
    }
    detectValues(name) {
        const elements = this.document.querySelectorAll(`script[type="application/json"][data-customary-name='${name}']`);
        if (elements.length === 0) return undefined;
        const result = {};
        for (const element of elements)if (element.textContent) {
            // TODO Require a key and retire default 'state'
            const key = element.getAttribute('data-customary-value') ?? 'state';
            result[key] = JSON.parse(element.textContent);
        }
        return result;
    }
}


function $a6578a6f2ac293b9$export$3452ba782587c66f(constructor) {
    return $a6578a6f2ac293b9$var$definition_property in constructor;
}
function $a6578a6f2ac293b9$export$5c2b83001c88ec5b(constructor, definition) {
    constructor[$a6578a6f2ac293b9$var$definition_property] = definition;
}
function $a6578a6f2ac293b9$export$6dac8c184f86ad18(element) {
    const constructor = element.constructor;
    return constructor[$a6578a6f2ac293b9$var$definition_property] ?? (()=>{
        throw new Error(`${constructor.name}: element never defined`);
    })();
}
const $a6578a6f2ac293b9$var$definition_property = 'customary_definition';


class $ee240c89551fb5d5$export$403d1949f253139e {
    fetchText;
    options;
    constructor(fetchText, options){
        this.fetchText = fetchText;
        this.options = options;
    }
    async loadHtml() {
        const location = this.resolveResourceLocation('html');
        return await this.fetchText.fetchText(location);
    }
    resolveResourceLocation(extension) {
        return $ee240c89551fb5d5$export$de7ab7265d436fa0({
            import_meta: this.options.import_meta,
            name: this.options.name,
            extension: extension
        });
    }
}
function $ee240c89551fb5d5$export$de7ab7265d436fa0(options) {
    return options.import_meta.resolve(`./${options.name}.${options.extension}`);
}


class $961a8c3f5b2d4f3f$var$FetchText_DOM {
    async fetchText(input) {
        console.debug('fetch: ' + input);
        const response = await fetch(input);
        if (response.ok) return await response.text();
        throw new Error(response.statusText, {
            cause: response
        });
    }
}
const $961a8c3f5b2d4f3f$export$d763ec234f19c958 = new $961a8c3f5b2d4f3f$var$FetchText_DOM();


function $8820451acf65219a$export$992aa6859e31245f(tag, value, template) {
    try {
        tag.outerHTML = value;
    } catch (error) {
        const chrome = "Failed to set the 'outerHTML' property on 'Element': This element's parent is of type '#document-fragment', which is not an element node.";
        if (error.message === chrome) template.innerHTML = template.innerHTML.replace(tag.outerHTML, value);
    }
}


function $225e422def53c65f$export$fef48429545ba792(markup) {
    return markup.replace(':', '\\:');
}


class $d7d47204179bab71$export$8d09ee4c629fddff {
    static hydrate(template) {
        this.hydrateTree(template.content, template);
    }
    static hydrateTree(node, template) {
        while(true){
            const tag = node.querySelector((0, $225e422def53c65f$export$fef48429545ba792)($d7d47204179bab71$var$for_markup));
            if (!tag) return;
            this.hydrateTree(tag, template);
            const items = tag.getAttribute('items') ?? (()=>{
                throw Error(`Attribute "items" is required for "${$d7d47204179bab71$var$for_markup}" markup`);
            })();
            const value = tag.getAttribute('value') ?? 'value';
            const index = tag.getAttribute('index');
            const args = index ? `(${value}, ${index})` : value;
            const body = tag.innerHTML;
            const use_repeat_instead_of_map = true;
            const directive = use_repeat_instead_of_map ? `\${repeat(${items}??[], ${args} => customary_lit_html_track( html\`${body}\` ) )}` : `\${map(${items}, ${args} => customary_lit_html_track( html\`${body}\` ) )}`;
            (0, $8820451acf65219a$export$992aa6859e31245f)(tag, directive, template);
        }
    }
}
const $d7d47204179bab71$var$for_markup = 'customary:for';




class $50a55c62b436c070$export$30142ff0bf8ef8b2 {
    static hydrate(template) {
        this.hydrateTree(template.content, template);
    }
    static hydrateTree(node, template) {
        while(true){
            const tag = node.querySelector((0, $225e422def53c65f$export$fef48429545ba792)($50a55c62b436c070$var$if_markup));
            if (!tag) return;
            this.hydrateTree(tag, template);
            const condition = tag.getAttribute('condition') ?? (()=>{
                throw Error(`Attribute "condition" is required for "${$50a55c62b436c070$var$if_markup}" markup`);
            })();
            const trueElements = [
                ...tag.querySelectorAll(`:scope > ${(0, $225e422def53c65f$export$fef48429545ba792)($50a55c62b436c070$var$true_markup)}`)
            ];
            if (trueElements.length > 1) throw Error(`Only one "${$50a55c62b436c070$var$true_markup}" is allowed for "${$50a55c62b436c070$var$if_markup}" markup`);
            const trueElement = trueElements[0];
            const falseElements = [
                ...tag.querySelectorAll(`:scope > ${(0, $225e422def53c65f$export$fef48429545ba792)($50a55c62b436c070$var$false_markup)}`)
            ];
            if (falseElements.length > 1) throw Error(`Only one "${$50a55c62b436c070$var$false_markup}" is allowed for "${$50a55c62b436c070$var$if_markup}" markup`);
            const falseElement = falseElements[0];
            if (falseElement && !trueElement) throw Error(`One "${$50a55c62b436c070$var$true_markup}" is required if "${$50a55c62b436c070$var$false_markup}" present for "${$50a55c62b436c070$var$if_markup}" markup`);
            const trueCase = `() => customary_lit_html_track( html\`${trueElement?.innerHTML ?? tag.innerHTML}\` )`;
            const falseCase = falseElement ? `, () => customary_lit_html_track( html\`${falseElement.innerHTML}\` )` : '';
            const directive = `\${when(${condition}, ${trueCase}${falseCase})}`;
            (0, $8820451acf65219a$export$992aa6859e31245f)(tag, directive, template);
        }
    }
}
const $50a55c62b436c070$var$if_markup = 'customary:if';
const $50a55c62b436c070$var$false_markup = 'customary:false';
const $50a55c62b436c070$var$true_markup = 'customary:true';



class $f343cffaa865bcc1$export$e8d2d0d808af9c0f {
    static hydrate(template) {
        this.hydrateTree(template.content, template);
    }
    static hydrateTree(node, template) {
        while(true){
            const markup = node.querySelector((0, $225e422def53c65f$export$fef48429545ba792)($f343cffaa865bcc1$var$inside_markup));
            if (!markup) return;
            this.hydrateTree(markup, template);
            const selectors = markup.getAttribute('target');
            if (!selectors) throw new Error(`Attribute "target" is required for "${$f343cffaa865bcc1$var$inside_markup}" markup`);
            const target = node.querySelector(selectors);
            if (!target) throw new Error(`No element matching ${selectors}`);
            target.innerHTML = markup.innerHTML;
            markup.parentNode.removeChild(markup);
        }
    }
}
const $f343cffaa865bcc1$var$inside_markup = 'customary:inside';




class $a6629e29c8dba76d$export$19c1ebc334082502 {
    static hydrate(template) {
        this.hydrateTree(template.content, template);
    }
    static hydrateTree(node, template) {
        while(true){
            const tag = node.querySelector((0, $225e422def53c65f$export$fef48429545ba792)($a6629e29c8dba76d$var$switch_markup));
            if (!tag) return;
            this.hydrateTree(tag, template);
            const value = tag.getAttribute('value') ?? (()=>{
                throw Error(`Attribute "value" is required for "${$a6629e29c8dba76d$var$switch_markup}" markup`);
            })();
            const cases = this.toCases([
                ...tag.querySelectorAll(`:scope > ${(0, $225e422def53c65f$export$fef48429545ba792)($a6629e29c8dba76d$var$case_markup)}`)
            ]);
            const valueCases = cases.valueCases.join(',\n');
            const defaultCase = cases.defaultCase ? `,\n${cases.defaultCase}` : '';
            const directive = `\${choose(${value},\n[${valueCases}]${defaultCase})}`;
            (0, $8820451acf65219a$export$992aa6859e31245f)(tag, directive, template);
        }
    }
    static toCases(cases) {
        if (cases.length === 0) throw Error(`At least one "${$a6629e29c8dba76d$var$case_markup}" is required for "${$a6629e29c8dba76d$var$switch_markup}" markup`);
        const defaultElements = cases.filter((caseElement)=>!caseElement.hasAttribute('value'));
        if (defaultElements.length > 1) throw Error(`Only one default "${$a6629e29c8dba76d$var$case_markup}" is allowed for "${$a6629e29c8dba76d$var$switch_markup}" markup`);
        const defaultElement = defaultElements[0];
        const defaultCase = `() => customary_lit_html_track( html\`${defaultElement?.innerHTML}\` )`;
        const valueElements = cases.filter((caseElement)=>caseElement.hasAttribute('value'));
        const valueCases = valueElements.map((caseElement)=>{
            const value = caseElement.getAttribute('value');
            return `['${value}', () => customary_lit_html_track( html\`${caseElement.innerHTML}\` ) ]`;
        });
        return {
            valueCases: valueCases,
            defaultCase: defaultCase
        };
    }
}
const $a6629e29c8dba76d$var$switch_markup = 'customary:switch';
const $a6629e29c8dba76d$var$case_markup = 'customary:case';


class $aa0e73906d8c1d1f$export$d2f740e6c972cdb4 {
    static injectProperties(constructor, propertyDeclaration, names) {
        if (!names.length) return;
        const properties = constructor.properties ??= {};
        for (const key of names){
            if (key in properties) throw new Error(`${key}: property already exists.`);
            properties[key] = propertyDeclaration;
        }
    }
}


class $c3a8716eb65e2738$export$5168145dca66f61b {
    static addProperties(constructor, attributesDefinition) {
        (0, $aa0e73906d8c1d1f$export$d2f740e6c972cdb4).injectProperties(constructor, {
            reflect: true
        }, attributesDefinition.attributes);
    }
}



class $0fe9377839455810$export$a9f1901adeec51a7 {
    static addProperties(constructor, declaration) {
        const fromDeclaration = declaration.config?.state ?? [];
        const fromLegacy = [
            'state'
        ];
        const names = [
            ...new Set([
                ...fromDeclaration,
                ...fromLegacy
            ])
        ];
        (0, $aa0e73906d8c1d1f$export$d2f740e6c972cdb4).injectProperties(constructor, {
            state: true
        }, names);
    }
}



class $240403f5828ff7e8$export$61ef374d05bfb1e {
    static addProperties(constructor, declaration) {
        const hooks = declaration.hooks?.properties;
        const hooksArray = hooks instanceof Array ? hooks : [];
        const hooksRecord = hooks && !(hooks instanceof Array) ? hooks : {};
        const fromArray = hooksArray.map((o)=>o.name);
        const fromRecord = Object.keys(hooksRecord);
        const names = [
            ...new Set([
                ...fromArray,
                ...fromRecord
            ])
        ];
        for (const key of names)(0, $aa0e73906d8c1d1f$export$d2f740e6c972cdb4).injectProperties(constructor, hooksArray.find((value)=>value.name === key)?.propertyDeclaration ?? hooksRecord[key], [
            key
        ]);
    }
}


class $8ac2f138c20afb51$export$600185c43209b69f {
    static setBooleanAttributeExpressionPlaceholder(tag, name, value) {
        tag.setAttribute(`${$8ac2f138c20afb51$var$LIT_BOOLEAN_ATTRIBUTE_EXPRESSION_PREFIX}${name}`, value);
    }
    static setPropertyExpressionPlaceholder(tag, name, value) {
        tag.setAttribute(`${$8ac2f138c20afb51$var$LIT_PROPERTY_EXPRESSION_PREFIX}${name}`, value);
    }
    static recode(htmlString) {
        const s1 = htmlString.replaceAll($8ac2f138c20afb51$var$LIT_PROPERTY_EXPRESSION_PREFIX, '.');
        return s1.replaceAll($8ac2f138c20afb51$var$LIT_BOOLEAN_ATTRIBUTE_EXPRESSION_PREFIX, '?');
    }
}
// lowercase because setAttribute would lowercase it regardless
const $8ac2f138c20afb51$var$LIT_PROPERTY_EXPRESSION_PREFIX = '____lit_property_expression_prefix____';
const $8ac2f138c20afb51$var$LIT_BOOLEAN_ATTRIBUTE_EXPRESSION_PREFIX = '____lit_boolean_attribute_expression_prefix____';


class $a1c562db7d71c001$export$416e73b0bcc4c4c3 {
    static hydrate(template) {
        const tags = template.content.querySelectorAll(`[${$a1c562db7d71c001$export$ab01fe353da9eec0}]`);
        for (const tag of tags){
            const binding = tag.getAttribute($a1c562db7d71c001$export$ab01fe353da9eec0);
            const type = tag.getAttribute('type');
            if (type === 'checkbox') (0, $8ac2f138c20afb51$export$600185c43209b69f).setBooleanAttributeExpressionPlaceholder(tag, 'checked', "${" + `this.${binding}` + " === 'true'}");
            else (0, $8ac2f138c20afb51$export$600185c43209b69f).setPropertyExpressionPlaceholder(tag, 'value', "${" + `this.${binding}` + ' ?? null}');
        }
    }
}
const $a1c562db7d71c001$export$ab01fe353da9eec0 = 'data-customary-bind';


function $2e9076adeb513463$export$f531b3a8754a3eba({ config: config, template: template }) {
    const fromConfig = config?.attributes ?? [];
    const fromTemplate = template.getAttribute('data-customary-attributes')?.split(',').map((s)=>s.trim()) ?? [];
    return {
        attributes: [
            ...new Set([
                ...fromConfig,
                ...fromTemplate
            ])
        ]
    };
}



class $064348f6cb33a6f6$export$13d98f3fe81ca8a4 {
    static hydrate(template) {
        const tags = Array.from(template.content.querySelectorAll(`[${$064348f6cb33a6f6$var$EXPRESSIONS_ATTRIBUTE}]`));
        for (const tag of tags){
            const names = tag.getAttributeNames().filter((name)=>name.startsWith($064348f6cb33a6f6$var$EXPRESSION_ATTRIBUTE_PREFIX));
            for (const name of names){
                (0, $8ac2f138c20afb51$export$600185c43209b69f).setPropertyExpressionPlaceholder(tag, name.substring($064348f6cb33a6f6$var$LENGTH), tag.getAttribute(name));
                tag.removeAttribute(name);
            }
            tag.removeAttribute($064348f6cb33a6f6$var$EXPRESSIONS_ATTRIBUTE);
        }
    }
}
const $064348f6cb33a6f6$var$EXPRESSIONS_ATTRIBUTE = 'data-customary-expressions';
const $064348f6cb33a6f6$var$EXPRESSION_ATTRIBUTE_PREFIX = 'data-customary-expression-';
const $064348f6cb33a6f6$var$LENGTH = $064348f6cb33a6f6$var$EXPRESSION_ATTRIBUTE_PREFIX.length;



class $f83be5948bd06259$export$1d2219be11768641 {
    declaration;
    async define(constructor) {
        return await this.buildDefinition(constructor);
    }
    async buildDefinition(constructor) {
        const { template: template, templateInDocument: templateInDocument } = await this.resolveHTMLTemplateElement(this.name);
        const attributes = (0, $2e9076adeb513463$export$f531b3a8754a3eba)({
            config: this.declaration.config,
            template: template
        });
        const customaryDefinition = {
            declaration: this.declaration,
            attributes: attributes,
            templateInDocument: !!templateInDocument,
            immutable_htmlString: this.getHtmlString(template)
        };
        $f83be5948bd06259$export$1d2219be11768641.addProperties(constructor, customaryDefinition);
        return customaryDefinition;
    }
    async resolveHTMLTemplateElement(name) {
        try {
            const templateInDocument = $f83be5948bd06259$var$findHTMLTemplateElement(name, document);
            if (templateInDocument) return {
                template: templateInDocument,
                templateInDocument: templateInDocument
            };
            const templateInExternalFile = await this.findHTMLTemplateElementInExternalFile(name);
            return {
                template: templateInExternalFile,
                templateInDocument: undefined
            };
        } catch (error) {
            throw new Error('template unresolvable from current page or external html', {
                cause: error
            });
        }
    }
    static addProperties(constructor, customaryDefinition) {
        (0, $c3a8716eb65e2738$export$5168145dca66f61b).addProperties(constructor, customaryDefinition.attributes);
        (0, $0fe9377839455810$export$a9f1901adeec51a7).addProperties(constructor, customaryDefinition.declaration);
        (0, $240403f5828ff7e8$export$61ef374d05bfb1e).addProperties(constructor, customaryDefinition.declaration);
    }
    getHtmlString(template) {
        this.hydrateBindings(template);
        this.hydrateMarkup(template);
        const s1 = template.innerHTML;
        const s2 = (0, $8ac2f138c20afb51$export$600185c43209b69f).recode(s1);
        return $f83be5948bd06259$var$recodeMarkup(s2);
    }
    hydrateBindings(template) {
        (0, $064348f6cb33a6f6$export$13d98f3fe81ca8a4).hydrate(template);
        (0, $a1c562db7d71c001$export$416e73b0bcc4c4c3).hydrate(template);
    }
    hydrateMarkup(template) {
        (0, $d7d47204179bab71$export$8d09ee4c629fddff).hydrate(template);
        (0, $50a55c62b436c070$export$30142ff0bf8ef8b2).hydrate(template);
        (0, $a6629e29c8dba76d$export$19c1ebc334082502).hydrate(template);
        // must be last to accommodate all others
        (0, $f343cffaa865bcc1$export$e8d2d0d808af9c0f).hydrate(template);
    }
    async findHTMLTemplateElementInExternalFile(name) {
        const htmlString = await this.loadExternalHtml();
        const template = document.createElement('template');
        template.innerHTML = htmlString;
        return $f83be5948bd06259$var$findHTMLTemplateElement(name, template.content) ?? template;
    }
    async loadExternalHtml() {
        try {
            return await (await this.externalLoader).loadHtml();
        } catch (error) {
            throw new Error('External html file out of reach.', {
                cause: error
            });
        }
    }
    constructor(declaration){
        this.declaration = declaration;
        this.name = this.declaration.name;
    }
    name;
    get externalLoader() {
        return this._externalLoader ??= $f83be5948bd06259$var$createExternalLoader(this.fetchText, {
            name: this.name,
            import_meta: $f83be5948bd06259$export$b822a0ad0f6e4c40(this.declaration)
        });
    }
    _externalLoader;
    get fetchText() {
        return this._fetchText ??= $f83be5948bd06259$var$loadFetchText();
    }
    _fetchText;
}
async function $f83be5948bd06259$var$createExternalLoader(fetchText, options) {
    return new (0, $ee240c89551fb5d5$export$403d1949f253139e)(await fetchText, options);
}
async function $f83be5948bd06259$var$loadFetchText() {
    return 0, $961a8c3f5b2d4f3f$export$d763ec234f19c958;
}
function $f83be5948bd06259$var$findHTMLTemplateElement(name, node) {
    return node.querySelector(`template[data-customary-name='${name}']`) ?? undefined;
}
/**
 innerHTML encodes some characters used by lit directives
 so we must decode them back into the HTML string.
 over time the need to do this should disappear,
 as we add directive markup for a larger number of lit directives.
 */ function $f83be5948bd06259$var$recodeMarkup(htmlString) {
    // lit directives expressed as arrow functions
    return htmlString.replaceAll('=&gt;', '=>');
}
function $f83be5948bd06259$export$b822a0ad0f6e4c40(declaration) {
    return declaration.hooks?.externalLoader?.import_meta ?? (()=>{
        throw new Error(`${declaration.name}: Customary needs "import.meta" if the custom element template ` + 'is to be loaded from an external file. ' + '(document did not have a named template element, and an html string was not provided.)');
    })();
}
function $f83be5948bd06259$export$68c38d987afcbfba(declaration) {
    return ((a)=>a.length > 0 ? a : undefined)([
        declaration.config?.define?.fontLocation,
        ...declaration.config?.define?.fontLocations ?? []
    ].filter((location)=>location != undefined));
}


const $d29bea016259bab1$var$WAIT_TO_DEFINE_EVERYTHING_IN_THE_END = false;
class $d29bea016259bab1$export$d37a9068d840d1de {
    dom_customElementRegistry;
    static singleton() {
        return $d29bea016259bab1$export$d37a9068d840d1de.CustomaryRegistry_singleton;
    }
    async declare(constructor, declaration) {
        if (!declaration.name) throw new Error('A name must be provided to define a custom element.');
        if (!$d29bea016259bab1$var$WAIT_TO_DEFINE_EVERYTHING_IN_THE_END) {
            await this.define(constructor, declaration);
            return;
        }
        this.declarations.set(constructor, declaration);
    }
    async settle() {
        if (!$d29bea016259bab1$var$WAIT_TO_DEFINE_EVERYTHING_IN_THE_END) return;
        const entries = [
            ...this.declarations.entries()
        ];
        const promises = entries.map((entry)=>{
            const [constructor, declaration] = entry;
            return this.define(constructor, declaration);
        });
        await Promise.all(promises);
    }
    async untilDefined(constructor) {
        const name = constructor.customary?.name;
        if (name === undefined) throw new Error('Class must have the "customary" declaration with a "name" property.');
        return await this.dom_customElementRegistry.whenDefined(name);
    }
    async define(constructor, declaration) {
        if ((0, $a6578a6f2ac293b9$export$3452ba782587c66f)(constructor)) {
            console.debug(`${constructor.name}: element already defined, skipping...`);
            return;
        }
        const definition = await new (0, $f83be5948bd06259$export$1d2219be11768641)(declaration).define(constructor);
        (0, $a6578a6f2ac293b9$export$5c2b83001c88ec5b)(constructor, definition);
        this.dom_customElementRegistry.define(declaration.name, constructor, declaration.hooks?.dom?.define?.options);
    }
    constructor(dom_customElementRegistry){
        this.dom_customElementRegistry = dom_customElementRegistry;
        this.declarations = new Map();
    }
    declarations;
    static CustomaryRegistry_singleton = new $d29bea016259bab1$export$d37a9068d840d1de(customElements);
}


var $6b52b5e2005fdcd9$exports = {};

$parcel$export($6b52b5e2005fdcd9$exports, "LitElement", () => $d812c34aed91105d$export$3f2f9f5909897157);
$parcel$export($6b52b5e2005fdcd9$exports, "html", () => $34c890d2bba8533a$export$c0bb0b647f701bb5);
$parcel$export($6b52b5e2005fdcd9$exports, "choose", () => $36ba9077c37f6d69$export$7877a478dd30fd3d);
$parcel$export($6b52b5e2005fdcd9$exports, "map", () => $2df088f3943a4311$export$871de8747c9eaa88);
$parcel$export($6b52b5e2005fdcd9$exports, "repeat", () => $e2b607c6d10b582c$export$76d90c956114f2c2);
$parcel$export($6b52b5e2005fdcd9$exports, "when", () => $5114a2a7e9d58c35$export$a55877ca9db47377);
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const $8986b12aaba1663b$var$t = globalThis, $8986b12aaba1663b$export$b4d10f6001c083c2 = $8986b12aaba1663b$var$t.ShadowRoot && (void 0 === $8986b12aaba1663b$var$t.ShadyCSS || $8986b12aaba1663b$var$t.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype, $8986b12aaba1663b$var$s = Symbol(), $8986b12aaba1663b$var$o = new WeakMap;
class $8986b12aaba1663b$export$505d1e8739bad805 {
    constructor(t, e, o){
        if (this._$cssResult$ = !0, o !== $8986b12aaba1663b$var$s) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
        this.cssText = t, this.t = e;
    }
    get styleSheet() {
        let t = this.o;
        const s = this.t;
        if ($8986b12aaba1663b$export$b4d10f6001c083c2 && void 0 === t) {
            const e = void 0 !== s && 1 === s.length;
            e && (t = $8986b12aaba1663b$var$o.get(s)), void 0 === t && ((this.o = t = new CSSStyleSheet).replaceSync(this.cssText), e && $8986b12aaba1663b$var$o.set(s, t));
        }
        return t;
    }
    toString() {
        return this.cssText;
    }
}
const $8986b12aaba1663b$export$8d80f9cac07cdb3 = (t)=>new $8986b12aaba1663b$export$505d1e8739bad805("string" == typeof t ? t : t + "", void 0, $8986b12aaba1663b$var$s), $8986b12aaba1663b$export$dbf350e5966cf602 = (t, ...e)=>{
    const o = 1 === t.length ? t[0] : e.reduce((e, s, o)=>e + ((t)=>{
            if (!0 === t._$cssResult$) return t.cssText;
            if ("number" == typeof t) return t;
            throw Error("Value passed to 'css' function must be a 'css' function result: " + t + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
        })(s) + t[o + 1], t[0]);
    return new $8986b12aaba1663b$export$505d1e8739bad805(o, t, $8986b12aaba1663b$var$s);
}, $8986b12aaba1663b$export$2ca4a66ec4cecb90 = (s, o)=>{
    if ($8986b12aaba1663b$export$b4d10f6001c083c2) s.adoptedStyleSheets = o.map((t)=>t instanceof CSSStyleSheet ? t : t.styleSheet);
    else for (const e of o){
        const o = document.createElement("style"), n = $8986b12aaba1663b$var$t.litNonce;
        void 0 !== n && o.setAttribute("nonce", n), o.textContent = e.cssText, s.appendChild(o);
    }
}, $8986b12aaba1663b$export$ee69dfd951e24778 = $8986b12aaba1663b$export$b4d10f6001c083c2 ? (t)=>t : (t)=>t instanceof CSSStyleSheet ? ((t)=>{
        let e = "";
        for (const s of t.cssRules)e += s.cssText;
        return $8986b12aaba1663b$export$8d80f9cac07cdb3(e);
    })(t) : t;


/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const { is: $03b44d016d05e4a8$var$i, defineProperty: $03b44d016d05e4a8$var$e, getOwnPropertyDescriptor: $03b44d016d05e4a8$var$h, getOwnPropertyNames: $03b44d016d05e4a8$var$r, getOwnPropertySymbols: $03b44d016d05e4a8$var$o, getPrototypeOf: $03b44d016d05e4a8$var$n } = Object, $03b44d016d05e4a8$var$a = globalThis, $03b44d016d05e4a8$var$c = $03b44d016d05e4a8$var$a.trustedTypes, $03b44d016d05e4a8$var$l = $03b44d016d05e4a8$var$c ? $03b44d016d05e4a8$var$c.emptyScript : "", $03b44d016d05e4a8$var$p = $03b44d016d05e4a8$var$a.reactiveElementPolyfillSupport, $03b44d016d05e4a8$var$d = (t, s)=>t, $03b44d016d05e4a8$export$7312b35fbf521afb = {
    toAttribute (t, s) {
        switch(s){
            case Boolean:
                t = t ? $03b44d016d05e4a8$var$l : null;
                break;
            case Object:
            case Array:
                t = null == t ? t : JSON.stringify(t);
        }
        return t;
    },
    fromAttribute (t, s) {
        let i = t;
        switch(s){
            case Boolean:
                i = null !== t;
                break;
            case Number:
                i = null === t ? null : Number(t);
                break;
            case Object:
            case Array:
                try {
                    i = JSON.parse(t);
                } catch (t) {
                    i = null;
                }
        }
        return i;
    }
}, $03b44d016d05e4a8$export$53a6892c50694894 = (t, s)=>!$03b44d016d05e4a8$var$i(t, s), $03b44d016d05e4a8$var$b = {
    attribute: !0,
    type: String,
    converter: $03b44d016d05e4a8$export$7312b35fbf521afb,
    reflect: !1,
    useDefault: !1,
    hasChanged: $03b44d016d05e4a8$export$53a6892c50694894
};
Symbol.metadata ??= Symbol("metadata"), $03b44d016d05e4a8$var$a.litPropertyMetadata ??= new WeakMap;
class $03b44d016d05e4a8$export$c7c07a37856565d extends HTMLElement {
    static addInitializer(t) {
        this._$Ei(), (this.l ??= []).push(t);
    }
    static get observedAttributes() {
        return this.finalize(), this._$Eh && [
            ...this._$Eh.keys()
        ];
    }
    static createProperty(t, s = $03b44d016d05e4a8$var$b) {
        if (s.state && (s.attribute = !1), this._$Ei(), this.prototype.hasOwnProperty(t) && ((s = Object.create(s)).wrapped = !0), this.elementProperties.set(t, s), !s.noAccessor) {
            const i = Symbol(), h = this.getPropertyDescriptor(t, i, s);
            void 0 !== h && $03b44d016d05e4a8$var$e(this.prototype, t, h);
        }
    }
    static getPropertyDescriptor(t, s, i) {
        const { get: e, set: r } = $03b44d016d05e4a8$var$h(this.prototype, t) ?? {
            get () {
                return this[s];
            },
            set (t) {
                this[s] = t;
            }
        };
        return {
            get: e,
            set (s) {
                const h = e?.call(this);
                r?.call(this, s), this.requestUpdate(t, h, i);
            },
            configurable: !0,
            enumerable: !0
        };
    }
    static getPropertyOptions(t) {
        return this.elementProperties.get(t) ?? $03b44d016d05e4a8$var$b;
    }
    static _$Ei() {
        if (this.hasOwnProperty($03b44d016d05e4a8$var$d("elementProperties"))) return;
        const t = $03b44d016d05e4a8$var$n(this);
        t.finalize(), void 0 !== t.l && (this.l = [
            ...t.l
        ]), this.elementProperties = new Map(t.elementProperties);
    }
    static finalize() {
        if (this.hasOwnProperty($03b44d016d05e4a8$var$d("finalized"))) return;
        if (this.finalized = !0, this._$Ei(), this.hasOwnProperty($03b44d016d05e4a8$var$d("properties"))) {
            const t = this.properties, s = [
                ...$03b44d016d05e4a8$var$r(t),
                ...$03b44d016d05e4a8$var$o(t)
            ];
            for (const i of s)this.createProperty(i, t[i]);
        }
        const t = this[Symbol.metadata];
        if (null !== t) {
            const s = litPropertyMetadata.get(t);
            if (void 0 !== s) for (const [t, i] of s)this.elementProperties.set(t, i);
        }
        this._$Eh = new Map;
        for (const [t, s] of this.elementProperties){
            const i = this._$Eu(t, s);
            void 0 !== i && this._$Eh.set(i, t);
        }
        this.elementStyles = this.finalizeStyles(this.styles);
    }
    static finalizeStyles(s) {
        const i = [];
        if (Array.isArray(s)) {
            const e = new Set(s.flat(1 / 0).reverse());
            for (const s of e)i.unshift((0, $8986b12aaba1663b$export$ee69dfd951e24778)(s));
        } else void 0 !== s && i.push((0, $8986b12aaba1663b$export$ee69dfd951e24778)(s));
        return i;
    }
    static _$Eu(t, s) {
        const i = s.attribute;
        return !1 === i ? void 0 : "string" == typeof i ? i : "string" == typeof t ? t.toLowerCase() : void 0;
    }
    constructor(){
        super(), this._$Ep = void 0, this.isUpdatePending = !1, this.hasUpdated = !1, this._$Em = null, this._$Ev();
    }
    _$Ev() {
        this._$ES = new Promise((t)=>this.enableUpdating = t), this._$AL = new Map, this._$E_(), this.requestUpdate(), this.constructor.l?.forEach((t)=>t(this));
    }
    addController(t) {
        (this._$EO ??= new Set).add(t), void 0 !== this.renderRoot && this.isConnected && t.hostConnected?.();
    }
    removeController(t) {
        this._$EO?.delete(t);
    }
    _$E_() {
        const t = new Map, s = this.constructor.elementProperties;
        for (const i of s.keys())this.hasOwnProperty(i) && (t.set(i, this[i]), delete this[i]);
        t.size > 0 && (this._$Ep = t);
    }
    createRenderRoot() {
        const t = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
        return (0, $8986b12aaba1663b$export$2ca4a66ec4cecb90)(t, this.constructor.elementStyles), t;
    }
    connectedCallback() {
        this.renderRoot ??= this.createRenderRoot(), this.enableUpdating(!0), this._$EO?.forEach((t)=>t.hostConnected?.());
    }
    enableUpdating(t) {}
    disconnectedCallback() {
        this._$EO?.forEach((t)=>t.hostDisconnected?.());
    }
    attributeChangedCallback(t, s, i) {
        this._$AK(t, i);
    }
    _$ET(t, s) {
        const i = this.constructor.elementProperties.get(t), e = this.constructor._$Eu(t, i);
        if (void 0 !== e && !0 === i.reflect) {
            const h = (void 0 !== i.converter?.toAttribute ? i.converter : $03b44d016d05e4a8$export$7312b35fbf521afb).toAttribute(s, i.type);
            this._$Em = t, null == h ? this.removeAttribute(e) : this.setAttribute(e, h), this._$Em = null;
        }
    }
    _$AK(t, s) {
        const i = this.constructor, e = i._$Eh.get(t);
        if (void 0 !== e && this._$Em !== e) {
            const t = i.getPropertyOptions(e), h = "function" == typeof t.converter ? {
                fromAttribute: t.converter
            } : void 0 !== t.converter?.fromAttribute ? t.converter : $03b44d016d05e4a8$export$7312b35fbf521afb;
            this._$Em = e, this[e] = h.fromAttribute(s, t.type) ?? this._$Ej?.get(e) ?? null, this._$Em = null;
        }
    }
    requestUpdate(t, s, i) {
        if (void 0 !== t) {
            const e = this.constructor, h = this[t];
            if (i ??= e.getPropertyOptions(t), !((i.hasChanged ?? $03b44d016d05e4a8$export$53a6892c50694894)(h, s) || i.useDefault && i.reflect && h === this._$Ej?.get(t) && !this.hasAttribute(e._$Eu(t, i)))) return;
            this.C(t, s, i);
        }
        !1 === this.isUpdatePending && (this._$ES = this._$EP());
    }
    C(t, s, { useDefault: i, reflect: e, wrapped: h }, r) {
        i && !(this._$Ej ??= new Map).has(t) && (this._$Ej.set(t, r ?? s ?? this[t]), !0 !== h || void 0 !== r) || (this._$AL.has(t) || (this.hasUpdated || i || (s = void 0), this._$AL.set(t, s)), !0 === e && this._$Em !== t && (this._$Eq ??= new Set).add(t));
    }
    async _$EP() {
        this.isUpdatePending = !0;
        try {
            await this._$ES;
        } catch (t) {
            Promise.reject(t);
        }
        const t = this.scheduleUpdate();
        return null != t && await t, !this.isUpdatePending;
    }
    scheduleUpdate() {
        return this.performUpdate();
    }
    performUpdate() {
        if (!this.isUpdatePending) return;
        if (!this.hasUpdated) {
            if (this.renderRoot ??= this.createRenderRoot(), this._$Ep) {
                for (const [t, s] of this._$Ep)this[t] = s;
                this._$Ep = void 0;
            }
            const t = this.constructor.elementProperties;
            if (t.size > 0) for (const [s, i] of t){
                const { wrapped: t } = i, e = this[s];
                !0 !== t || this._$AL.has(s) || void 0 === e || this.C(s, void 0, i, e);
            }
        }
        let t = !1;
        const s = this._$AL;
        try {
            t = this.shouldUpdate(s), t ? (this.willUpdate(s), this._$EO?.forEach((t)=>t.hostUpdate?.()), this.update(s)) : this._$EM();
        } catch (s) {
            throw t = !1, this._$EM(), s;
        }
        t && this._$AE(s);
    }
    willUpdate(t) {}
    _$AE(t) {
        this._$EO?.forEach((t)=>t.hostUpdated?.()), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(t)), this.updated(t);
    }
    _$EM() {
        this._$AL = new Map, this.isUpdatePending = !1;
    }
    get updateComplete() {
        return this.getUpdateComplete();
    }
    getUpdateComplete() {
        return this._$ES;
    }
    shouldUpdate(t) {
        return !0;
    }
    update(t) {
        this._$Eq &&= this._$Eq.forEach((t)=>this._$ET(t, this[t])), this._$EM();
    }
    updated(t) {}
    firstUpdated(t) {}
}
$03b44d016d05e4a8$export$c7c07a37856565d.elementStyles = [], $03b44d016d05e4a8$export$c7c07a37856565d.shadowRootOptions = {
    mode: "open"
}, $03b44d016d05e4a8$export$c7c07a37856565d[$03b44d016d05e4a8$var$d("elementProperties")] = new Map, $03b44d016d05e4a8$export$c7c07a37856565d[$03b44d016d05e4a8$var$d("finalized")] = new Map, $03b44d016d05e4a8$var$p?.({
    ReactiveElement: $03b44d016d05e4a8$export$c7c07a37856565d
}), ($03b44d016d05e4a8$var$a.reactiveElementVersions ??= []).push("2.1.0");


/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const $34c890d2bba8533a$var$t = globalThis, $34c890d2bba8533a$var$i = $34c890d2bba8533a$var$t.trustedTypes, $34c890d2bba8533a$var$s = $34c890d2bba8533a$var$i ? $34c890d2bba8533a$var$i.createPolicy("lit-html", {
    createHTML: (t)=>t
}) : void 0, $34c890d2bba8533a$var$e = "$lit$", $34c890d2bba8533a$var$h = `lit$${Math.random().toFixed(9).slice(2)}$`, $34c890d2bba8533a$var$o = "?" + $34c890d2bba8533a$var$h, $34c890d2bba8533a$var$n = `<${$34c890d2bba8533a$var$o}>`, $34c890d2bba8533a$var$r = document, $34c890d2bba8533a$var$l = ()=>$34c890d2bba8533a$var$r.createComment(""), $34c890d2bba8533a$var$c = (t)=>null === t || "object" != typeof t && "function" != typeof t, $34c890d2bba8533a$var$a = Array.isArray, $34c890d2bba8533a$var$u = (t)=>$34c890d2bba8533a$var$a(t) || "function" == typeof t?.[Symbol.iterator], $34c890d2bba8533a$var$d = "[ \t\n\f\r]", $34c890d2bba8533a$var$f = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g, $34c890d2bba8533a$var$v = /-->/g, $34c890d2bba8533a$var$_ = />/g, $34c890d2bba8533a$var$m = RegExp(`>|${$34c890d2bba8533a$var$d}(?:([^\\s"'>=/]+)(${$34c890d2bba8533a$var$d}*=${$34c890d2bba8533a$var$d}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`, "g"), $34c890d2bba8533a$var$p = /'/g, $34c890d2bba8533a$var$g = /"/g, $34c890d2bba8533a$var$$ = /^(?:script|style|textarea|title)$/i, $34c890d2bba8533a$var$y = (t)=>(i, ...s)=>({
            _$litType$: t,
            strings: i,
            values: s
        }), $34c890d2bba8533a$export$c0bb0b647f701bb5 = $34c890d2bba8533a$var$y(1), $34c890d2bba8533a$export$7ed1367e7fa1ad68 = $34c890d2bba8533a$var$y(2), $34c890d2bba8533a$export$47d5b44d225be5b4 = $34c890d2bba8533a$var$y(3), $34c890d2bba8533a$export$9c068ae9cc5db4e8 = Symbol.for("lit-noChange"), $34c890d2bba8533a$export$45b790e32b2810ee = Symbol.for("lit-nothing"), $34c890d2bba8533a$var$A = new WeakMap, $34c890d2bba8533a$var$C = $34c890d2bba8533a$var$r.createTreeWalker($34c890d2bba8533a$var$r, 129);
function $34c890d2bba8533a$var$P(t, i) {
    if (!$34c890d2bba8533a$var$a(t) || !t.hasOwnProperty("raw")) throw Error("invalid template strings array");
    return void 0 !== $34c890d2bba8533a$var$s ? $34c890d2bba8533a$var$s.createHTML(i) : i;
}
const $34c890d2bba8533a$var$V = (t, i)=>{
    const s = t.length - 1, o = [];
    let r, l = 2 === i ? "<svg>" : 3 === i ? "<math>" : "", c = $34c890d2bba8533a$var$f;
    for(let i = 0; i < s; i++){
        const s = t[i];
        let a, u, d = -1, y = 0;
        for(; y < s.length && (c.lastIndex = y, u = c.exec(s), null !== u);)y = c.lastIndex, c === $34c890d2bba8533a$var$f ? "!--" === u[1] ? c = $34c890d2bba8533a$var$v : void 0 !== u[1] ? c = $34c890d2bba8533a$var$_ : void 0 !== u[2] ? ($34c890d2bba8533a$var$$.test(u[2]) && (r = RegExp("</" + u[2], "g")), c = $34c890d2bba8533a$var$m) : void 0 !== u[3] && (c = $34c890d2bba8533a$var$m) : c === $34c890d2bba8533a$var$m ? ">" === u[0] ? (c = r ?? $34c890d2bba8533a$var$f, d = -1) : void 0 === u[1] ? d = -2 : (d = c.lastIndex - u[2].length, a = u[1], c = void 0 === u[3] ? $34c890d2bba8533a$var$m : '"' === u[3] ? $34c890d2bba8533a$var$g : $34c890d2bba8533a$var$p) : c === $34c890d2bba8533a$var$g || c === $34c890d2bba8533a$var$p ? c = $34c890d2bba8533a$var$m : c === $34c890d2bba8533a$var$v || c === $34c890d2bba8533a$var$_ ? c = $34c890d2bba8533a$var$f : (c = $34c890d2bba8533a$var$m, r = void 0);
        const x = c === $34c890d2bba8533a$var$m && t[i + 1].startsWith("/>") ? " " : "";
        l += c === $34c890d2bba8533a$var$f ? s + $34c890d2bba8533a$var$n : d >= 0 ? (o.push(a), s.slice(0, d) + $34c890d2bba8533a$var$e + s.slice(d) + $34c890d2bba8533a$var$h + x) : s + $34c890d2bba8533a$var$h + (-2 === d ? i : x);
    }
    return [
        $34c890d2bba8533a$var$P(t, l + (t[s] || "<?>") + (2 === i ? "</svg>" : 3 === i ? "</math>" : "")),
        o
    ];
};
class $34c890d2bba8533a$var$N {
    constructor({ strings: t, _$litType$: s }, n){
        let r;
        this.parts = [];
        let c = 0, a = 0;
        const u = t.length - 1, d = this.parts, [f, v] = $34c890d2bba8533a$var$V(t, s);
        if (this.el = $34c890d2bba8533a$var$N.createElement(f, n), $34c890d2bba8533a$var$C.currentNode = this.el.content, 2 === s || 3 === s) {
            const t = this.el.content.firstChild;
            t.replaceWith(...t.childNodes);
        }
        for(; null !== (r = $34c890d2bba8533a$var$C.nextNode()) && d.length < u;){
            if (1 === r.nodeType) {
                if (r.hasAttributes()) for (const t of r.getAttributeNames())if (t.endsWith($34c890d2bba8533a$var$e)) {
                    const i = v[a++], s = r.getAttribute(t).split($34c890d2bba8533a$var$h), e = /([.?@])?(.*)/.exec(i);
                    d.push({
                        type: 1,
                        index: c,
                        name: e[2],
                        strings: s,
                        ctor: "." === e[1] ? $34c890d2bba8533a$var$H : "?" === e[1] ? $34c890d2bba8533a$var$I : "@" === e[1] ? $34c890d2bba8533a$var$L : $34c890d2bba8533a$var$k
                    }), r.removeAttribute(t);
                } else t.startsWith($34c890d2bba8533a$var$h) && (d.push({
                    type: 6,
                    index: c
                }), r.removeAttribute(t));
                if ($34c890d2bba8533a$var$$.test(r.tagName)) {
                    const t = r.textContent.split($34c890d2bba8533a$var$h), s = t.length - 1;
                    if (s > 0) {
                        r.textContent = $34c890d2bba8533a$var$i ? $34c890d2bba8533a$var$i.emptyScript : "";
                        for(let i = 0; i < s; i++)r.append(t[i], $34c890d2bba8533a$var$l()), $34c890d2bba8533a$var$C.nextNode(), d.push({
                            type: 2,
                            index: ++c
                        });
                        r.append(t[s], $34c890d2bba8533a$var$l());
                    }
                }
            } else if (8 === r.nodeType) {
                if (r.data === $34c890d2bba8533a$var$o) d.push({
                    type: 2,
                    index: c
                });
                else {
                    let t = -1;
                    for(; -1 !== (t = r.data.indexOf($34c890d2bba8533a$var$h, t + 1));)d.push({
                        type: 7,
                        index: c
                    }), t += $34c890d2bba8533a$var$h.length - 1;
                }
            }
            c++;
        }
    }
    static createElement(t, i) {
        const s = $34c890d2bba8533a$var$r.createElement("template");
        return s.innerHTML = t, s;
    }
}
function $34c890d2bba8533a$var$S(t, i, s = t, e) {
    if (i === $34c890d2bba8533a$export$9c068ae9cc5db4e8) return i;
    let h = void 0 !== e ? s._$Co?.[e] : s._$Cl;
    const o = $34c890d2bba8533a$var$c(i) ? void 0 : i._$litDirective$;
    return h?.constructor !== o && (h?._$AO?.(!1), void 0 === o ? h = void 0 : (h = new o(t), h._$AT(t, s, e)), void 0 !== e ? (s._$Co ??= [])[e] = h : s._$Cl = h), void 0 !== h && (i = $34c890d2bba8533a$var$S(t, h._$AS(t, i.values), h, e)), i;
}
class $34c890d2bba8533a$var$M {
    constructor(t, i){
        this._$AV = [], this._$AN = void 0, this._$AD = t, this._$AM = i;
    }
    get parentNode() {
        return this._$AM.parentNode;
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    u(t) {
        const { el: { content: i }, parts: s } = this._$AD, e = (t?.creationScope ?? $34c890d2bba8533a$var$r).importNode(i, !0);
        $34c890d2bba8533a$var$C.currentNode = e;
        let h = $34c890d2bba8533a$var$C.nextNode(), o = 0, n = 0, l = s[0];
        for(; void 0 !== l;){
            if (o === l.index) {
                let i;
                2 === l.type ? i = new $34c890d2bba8533a$var$R(h, h.nextSibling, this, t) : 1 === l.type ? i = new l.ctor(h, l.name, l.strings, this, t) : 6 === l.type && (i = new $34c890d2bba8533a$var$z(h, this, t)), this._$AV.push(i), l = s[++n];
            }
            o !== l?.index && (h = $34c890d2bba8533a$var$C.nextNode(), o++);
        }
        return $34c890d2bba8533a$var$C.currentNode = $34c890d2bba8533a$var$r, e;
    }
    p(t) {
        let i = 0;
        for (const s of this._$AV)void 0 !== s && (void 0 !== s.strings ? (s._$AI(t, s, i), i += s.strings.length - 2) : s._$AI(t[i])), i++;
    }
}
class $34c890d2bba8533a$var$R {
    get _$AU() {
        return this._$AM?._$AU ?? this._$Cv;
    }
    constructor(t, i, s, e){
        this.type = 2, this._$AH = $34c890d2bba8533a$export$45b790e32b2810ee, this._$AN = void 0, this._$AA = t, this._$AB = i, this._$AM = s, this.options = e, this._$Cv = e?.isConnected ?? !0;
    }
    get parentNode() {
        let t = this._$AA.parentNode;
        const i = this._$AM;
        return void 0 !== i && 11 === t?.nodeType && (t = i.parentNode), t;
    }
    get startNode() {
        return this._$AA;
    }
    get endNode() {
        return this._$AB;
    }
    _$AI(t, i = this) {
        t = $34c890d2bba8533a$var$S(this, t, i), $34c890d2bba8533a$var$c(t) ? t === $34c890d2bba8533a$export$45b790e32b2810ee || null == t || "" === t ? (this._$AH !== $34c890d2bba8533a$export$45b790e32b2810ee && this._$AR(), this._$AH = $34c890d2bba8533a$export$45b790e32b2810ee) : t !== this._$AH && t !== $34c890d2bba8533a$export$9c068ae9cc5db4e8 && this._(t) : void 0 !== t._$litType$ ? this.$(t) : void 0 !== t.nodeType ? this.T(t) : $34c890d2bba8533a$var$u(t) ? this.k(t) : this._(t);
    }
    O(t) {
        return this._$AA.parentNode.insertBefore(t, this._$AB);
    }
    T(t) {
        this._$AH !== t && (this._$AR(), this._$AH = this.O(t));
    }
    _(t) {
        this._$AH !== $34c890d2bba8533a$export$45b790e32b2810ee && $34c890d2bba8533a$var$c(this._$AH) ? this._$AA.nextSibling.data = t : this.T($34c890d2bba8533a$var$r.createTextNode(t)), this._$AH = t;
    }
    $(t) {
        const { values: i, _$litType$: s } = t, e = "number" == typeof s ? this._$AC(t) : (void 0 === s.el && (s.el = $34c890d2bba8533a$var$N.createElement($34c890d2bba8533a$var$P(s.h, s.h[0]), this.options)), s);
        if (this._$AH?._$AD === e) this._$AH.p(i);
        else {
            const t = new $34c890d2bba8533a$var$M(e, this), s = t.u(this.options);
            t.p(i), this.T(s), this._$AH = t;
        }
    }
    _$AC(t) {
        let i = $34c890d2bba8533a$var$A.get(t.strings);
        return void 0 === i && $34c890d2bba8533a$var$A.set(t.strings, i = new $34c890d2bba8533a$var$N(t)), i;
    }
    k(t) {
        $34c890d2bba8533a$var$a(this._$AH) || (this._$AH = [], this._$AR());
        const i = this._$AH;
        let s, e = 0;
        for (const h of t)e === i.length ? i.push(s = new $34c890d2bba8533a$var$R(this.O($34c890d2bba8533a$var$l()), this.O($34c890d2bba8533a$var$l()), this, this.options)) : s = i[e], s._$AI(h), e++;
        e < i.length && (this._$AR(s && s._$AB.nextSibling, e), i.length = e);
    }
    _$AR(t = this._$AA.nextSibling, i) {
        for(this._$AP?.(!1, !0, i); t && t !== this._$AB;){
            const i = t.nextSibling;
            t.remove(), t = i;
        }
    }
    setConnected(t) {
        void 0 === this._$AM && (this._$Cv = t, this._$AP?.(t));
    }
}
class $34c890d2bba8533a$var$k {
    get tagName() {
        return this.element.tagName;
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    constructor(t, i, s, e, h){
        this.type = 1, this._$AH = $34c890d2bba8533a$export$45b790e32b2810ee, this._$AN = void 0, this.element = t, this.name = i, this._$AM = e, this.options = h, s.length > 2 || "" !== s[0] || "" !== s[1] ? (this._$AH = Array(s.length - 1).fill(new String), this.strings = s) : this._$AH = $34c890d2bba8533a$export$45b790e32b2810ee;
    }
    _$AI(t, i = this, s, e) {
        const h = this.strings;
        let o = !1;
        if (void 0 === h) t = $34c890d2bba8533a$var$S(this, t, i, 0), o = !$34c890d2bba8533a$var$c(t) || t !== this._$AH && t !== $34c890d2bba8533a$export$9c068ae9cc5db4e8, o && (this._$AH = t);
        else {
            const e = t;
            let n, r;
            for(t = h[0], n = 0; n < h.length - 1; n++)r = $34c890d2bba8533a$var$S(this, e[s + n], i, n), r === $34c890d2bba8533a$export$9c068ae9cc5db4e8 && (r = this._$AH[n]), o ||= !$34c890d2bba8533a$var$c(r) || r !== this._$AH[n], r === $34c890d2bba8533a$export$45b790e32b2810ee ? t = $34c890d2bba8533a$export$45b790e32b2810ee : t !== $34c890d2bba8533a$export$45b790e32b2810ee && (t += (r ?? "") + h[n + 1]), this._$AH[n] = r;
        }
        o && !e && this.j(t);
    }
    j(t) {
        t === $34c890d2bba8533a$export$45b790e32b2810ee ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t ?? "");
    }
}
class $34c890d2bba8533a$var$H extends $34c890d2bba8533a$var$k {
    constructor(){
        super(...arguments), this.type = 3;
    }
    j(t) {
        this.element[this.name] = t === $34c890d2bba8533a$export$45b790e32b2810ee ? void 0 : t;
    }
}
class $34c890d2bba8533a$var$I extends $34c890d2bba8533a$var$k {
    constructor(){
        super(...arguments), this.type = 4;
    }
    j(t) {
        this.element.toggleAttribute(this.name, !!t && t !== $34c890d2bba8533a$export$45b790e32b2810ee);
    }
}
class $34c890d2bba8533a$var$L extends $34c890d2bba8533a$var$k {
    constructor(t, i, s, e, h){
        super(t, i, s, e, h), this.type = 5;
    }
    _$AI(t, i = this) {
        if ((t = $34c890d2bba8533a$var$S(this, t, i, 0) ?? $34c890d2bba8533a$export$45b790e32b2810ee) === $34c890d2bba8533a$export$9c068ae9cc5db4e8) return;
        const s = this._$AH, e = t === $34c890d2bba8533a$export$45b790e32b2810ee && s !== $34c890d2bba8533a$export$45b790e32b2810ee || t.capture !== s.capture || t.once !== s.once || t.passive !== s.passive, h = t !== $34c890d2bba8533a$export$45b790e32b2810ee && (s === $34c890d2bba8533a$export$45b790e32b2810ee || e);
        e && this.element.removeEventListener(this.name, this, s), h && this.element.addEventListener(this.name, this, t), this._$AH = t;
    }
    handleEvent(t) {
        "function" == typeof this._$AH ? this._$AH.call(this.options?.host ?? this.element, t) : this._$AH.handleEvent(t);
    }
}
class $34c890d2bba8533a$var$z {
    constructor(t, i, s){
        this.element = t, this.type = 6, this._$AN = void 0, this._$AM = i, this.options = s;
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    _$AI(t) {
        $34c890d2bba8533a$var$S(this, t);
    }
}
const $34c890d2bba8533a$export$8613d1ca9052b22e = {
    M: $34c890d2bba8533a$var$e,
    P: $34c890d2bba8533a$var$h,
    A: $34c890d2bba8533a$var$o,
    C: 1,
    L: $34c890d2bba8533a$var$V,
    R: $34c890d2bba8533a$var$M,
    D: $34c890d2bba8533a$var$u,
    V: $34c890d2bba8533a$var$S,
    I: $34c890d2bba8533a$var$R,
    H: $34c890d2bba8533a$var$k,
    N: $34c890d2bba8533a$var$I,
    U: $34c890d2bba8533a$var$L,
    B: $34c890d2bba8533a$var$H,
    F: $34c890d2bba8533a$var$z
}, $34c890d2bba8533a$var$j = $34c890d2bba8533a$var$t.litHtmlPolyfillSupport;
$34c890d2bba8533a$var$j?.($34c890d2bba8533a$var$N, $34c890d2bba8533a$var$R), ($34c890d2bba8533a$var$t.litHtmlVersions ??= []).push("3.3.0");
const $34c890d2bba8533a$export$b3890eb0ae9dca99 = (t, i, s)=>{
    const e = s?.renderBefore ?? i;
    let h = e._$litPart$;
    if (void 0 === h) {
        const t = s?.renderBefore ?? null;
        e._$litPart$ = h = new $34c890d2bba8533a$var$R(i.insertBefore($34c890d2bba8533a$var$l(), t), t, void 0, s ?? {});
    }
    return h._$AI(t), h;
};


/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const $d812c34aed91105d$var$s = globalThis;
class $d812c34aed91105d$export$3f2f9f5909897157 extends (0, $03b44d016d05e4a8$export$c7c07a37856565d) {
    constructor(){
        super(...arguments), this.renderOptions = {
            host: this
        }, this._$Do = void 0;
    }
    createRenderRoot() {
        const t = super.createRenderRoot();
        return this.renderOptions.renderBefore ??= t.firstChild, t;
    }
    update(t) {
        const r = this.render();
        this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t), this._$Do = (0, $34c890d2bba8533a$export$b3890eb0ae9dca99)(r, this.renderRoot, this.renderOptions);
    }
    connectedCallback() {
        super.connectedCallback(), this._$Do?.setConnected(!0);
    }
    disconnectedCallback() {
        super.disconnectedCallback(), this._$Do?.setConnected(!1);
    }
    render() {
        return 0, $34c890d2bba8533a$export$9c068ae9cc5db4e8;
    }
}
$d812c34aed91105d$export$3f2f9f5909897157._$litElement$ = !0, $d812c34aed91105d$export$3f2f9f5909897157["finalized"] = !0, $d812c34aed91105d$var$s.litElementHydrateSupport?.({
    LitElement: $d812c34aed91105d$export$3f2f9f5909897157
});
const $d812c34aed91105d$var$o = $d812c34aed91105d$var$s.litElementPolyfillSupport;
$d812c34aed91105d$var$o?.({
    LitElement: $d812c34aed91105d$export$3f2f9f5909897157
});
const $d812c34aed91105d$export$f5c524615a7708d6 = {
    _$AK: (t, e, r)=>{
        t._$AK(e, r);
    },
    _$AL: (t)=>t._$AL
};
($d812c34aed91105d$var$s.litElementVersions ??= []).push("4.2.0");



/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const $36ba9077c37f6d69$export$7877a478dd30fd3d = (r, o, t)=>{
    for (const t of o)if (t[0] === r) return (0, t[1])();
    return t?.();
};


/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ function* $2df088f3943a4311$export$871de8747c9eaa88(o, f) {
    if (void 0 !== o) {
        let i = 0;
        for (const t of o)yield f(t, i++);
    }
}



/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const $8699ceb9cb47e246$export$9ba3b3f20a85bfa = {
    ATTRIBUTE: 1,
    CHILD: 2,
    PROPERTY: 3,
    BOOLEAN_ATTRIBUTE: 4,
    EVENT: 5,
    ELEMENT: 6
}, $8699ceb9cb47e246$export$99b43ad1ed32e735 = (t)=>(...e)=>({
            _$litDirective$: t,
            values: e
        });
class $8699ceb9cb47e246$export$befdefbdce210f91 {
    constructor(t){}
    get _$AU() {
        return this._$AM._$AU;
    }
    _$AT(t, e, i) {
        this._$Ct = t, this._$AM = e, this._$Ci = i;
    }
    _$AS(t, e) {
        return this.update(t, e);
    }
    update(t, e) {
        return this.render(...e);
    }
}



/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const { I: $5c273462826e60d7$var$t } = (0, $34c890d2bba8533a$export$8613d1ca9052b22e), $5c273462826e60d7$export$c3825b437cbdea5c = (o)=>null === o || "object" != typeof o && "function" != typeof o, $5c273462826e60d7$export$80c36ae3cab9881d = {
    HTML: 1,
    SVG: 2,
    MATHML: 3
}, $5c273462826e60d7$export$6b6d145ec2a44ca9 = (o, t)=>void 0 === t ? void 0 !== o?._$litType$ : o?._$litType$ === t, $5c273462826e60d7$export$6a0e8de894d2fcca = (o)=>null != o?._$litType$?.h, $5c273462826e60d7$export$2f448fec17d50a3e = (o)=>void 0 !== o?._$litDirective$, $5c273462826e60d7$export$f28e31de6a6eaf32 = (o)=>o?._$litDirective$, $5c273462826e60d7$export$7f431ad0fff82fd9 = (o)=>void 0 === o.strings, $5c273462826e60d7$var$s = ()=>document.createComment(""), $5c273462826e60d7$export$291b2338ad9b0b30 = (o, i, n)=>{
    const e = o._$AA.parentNode, l = void 0 === i ? o._$AB : i._$AA;
    if (void 0 === n) {
        const i = e.insertBefore($5c273462826e60d7$var$s(), l), c = e.insertBefore($5c273462826e60d7$var$s(), l);
        n = new $5c273462826e60d7$var$t(i, c, o, o.options);
    } else {
        const t = n._$AB.nextSibling, i = n._$AM, c = i !== o;
        if (c) {
            let t;
            n._$AQ?.(o), n._$AM = o, void 0 !== n._$AP && (t = o._$AU) !== i._$AU && n._$AP(t);
        }
        if (t !== l || c) {
            let o = n._$AA;
            for(; o !== t;){
                const t = o.nextSibling;
                e.insertBefore(o, l), o = t;
            }
        }
    }
    return n;
}, $5c273462826e60d7$export$cb8bf9562088e9f4 = (o, t, i = o)=>(o._$AI(t, i), o), $5c273462826e60d7$var$u = {}, $5c273462826e60d7$export$ea70d9dd5965b1c8 = (o, t = $5c273462826e60d7$var$u)=>o._$AH = t, $5c273462826e60d7$export$59e9bce518cde500 = (o)=>o._$AH, $5c273462826e60d7$export$3133b3144bbba267 = (o)=>{
    o._$AP?.(!1, !0);
    let t = o._$AA;
    const i = o._$AB.nextSibling;
    for(; t !== i;){
        const o = t.nextSibling;
        t.remove(), t = o;
    }
}, $5c273462826e60d7$export$7f600b8138c094dc = (o)=>{
    o._$AR();
};


/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const $e2b607c6d10b582c$var$u = (e, s, t)=>{
    const r = new Map;
    for(let l = s; l <= t; l++)r.set(e[l], l);
    return r;
}, $e2b607c6d10b582c$export$76d90c956114f2c2 = (0, $8699ceb9cb47e246$export$99b43ad1ed32e735)(class extends (0, $8699ceb9cb47e246$export$befdefbdce210f91) {
    constructor(e){
        if (super(e), e.type !== (0, $8699ceb9cb47e246$export$9ba3b3f20a85bfa).CHILD) throw Error("repeat() can only be used in text expressions");
    }
    dt(e, s, t) {
        let r;
        void 0 === t ? t = s : void 0 !== s && (r = s);
        const l = [], o = [];
        let i = 0;
        for (const s of e)l[i] = r ? r(s, i) : i, o[i] = t(s, i), i++;
        return {
            values: o,
            keys: l
        };
    }
    render(e, s, t) {
        return this.dt(e, s, t).values;
    }
    update(s, [t, r, c]) {
        const d = (0, $5c273462826e60d7$export$59e9bce518cde500)(s), { values: p, keys: a } = this.dt(t, r, c);
        if (!Array.isArray(d)) return this.ut = a, p;
        const h = this.ut ??= [], v = [];
        let m, y, x = 0, j = d.length - 1, k = 0, w = p.length - 1;
        for(; x <= j && k <= w;)if (null === d[x]) x++;
        else if (null === d[j]) j--;
        else if (h[x] === a[k]) v[k] = (0, $5c273462826e60d7$export$cb8bf9562088e9f4)(d[x], p[k]), x++, k++;
        else if (h[j] === a[w]) v[w] = (0, $5c273462826e60d7$export$cb8bf9562088e9f4)(d[j], p[w]), j--, w--;
        else if (h[x] === a[w]) v[w] = (0, $5c273462826e60d7$export$cb8bf9562088e9f4)(d[x], p[w]), (0, $5c273462826e60d7$export$291b2338ad9b0b30)(s, v[w + 1], d[x]), x++, w--;
        else if (h[j] === a[k]) v[k] = (0, $5c273462826e60d7$export$cb8bf9562088e9f4)(d[j], p[k]), (0, $5c273462826e60d7$export$291b2338ad9b0b30)(s, d[x], d[j]), j--, k++;
        else if (void 0 === m && (m = $e2b607c6d10b582c$var$u(a, k, w), y = $e2b607c6d10b582c$var$u(h, x, j)), m.has(h[x])) {
            if (m.has(h[j])) {
                const e = y.get(a[k]), t = void 0 !== e ? d[e] : null;
                if (null === t) {
                    const e = (0, $5c273462826e60d7$export$291b2338ad9b0b30)(s, d[x]);
                    (0, $5c273462826e60d7$export$cb8bf9562088e9f4)(e, p[k]), v[k] = e;
                } else v[k] = (0, $5c273462826e60d7$export$cb8bf9562088e9f4)(t, p[k]), (0, $5c273462826e60d7$export$291b2338ad9b0b30)(s, d[x], t), d[e] = null;
                k++;
            } else (0, $5c273462826e60d7$export$3133b3144bbba267)(d[j]), j--;
        } else (0, $5c273462826e60d7$export$3133b3144bbba267)(d[x]), x++;
        for(; k <= w;){
            const e = (0, $5c273462826e60d7$export$291b2338ad9b0b30)(s, v[w + 1]);
            (0, $5c273462826e60d7$export$cb8bf9562088e9f4)(e, p[k]), v[k++] = e;
        }
        for(; x <= j;){
            const e = d[x++];
            null !== e && (0, $5c273462826e60d7$export$3133b3144bbba267)(e);
        }
        return this.ut = a, (0, $5c273462826e60d7$export$ea70d9dd5965b1c8)(s, v), $34c890d2bba8533a$export$9c068ae9cc5db4e8;
    }
});


/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ function $5114a2a7e9d58c35$export$a55877ca9db47377(n, r, t) {
    return n ? r(n) : t?.(n);
}






const $2de2a7cb75073a7c$var$DEFAULT_EVENT_TYPES = {
    'A': 'click',
    'BUTTON': 'click',
    'FORM': 'submit',
    'INPUT': 'input',
    'SELECT': 'input',
    'TABLE': 'click',
    'TEXTAREA': 'input'
};
function $2de2a7cb75073a7c$export$381cfde4b0cf8707(customElement, element, type, listener) {
    const listeners = element.__customary_listeners ??= [];
    if (listeners.includes(listener)) return;
    const tagName = element.tagName;
    element.addEventListener(type ?? $2de2a7cb75073a7c$var$DEFAULT_EVENT_TYPES[tagName] ?? (()=>{
        throw new Error(`${customElement.tagName.toLowerCase()}: ${tagName} elements` + ' require you to provide an event type' + ' because Customary has not defined a default yet');
    })(), (event)=>listener(customElement, event));
    listeners.push(listener);
}


class $384d43e047cea0a9$export$e524338e5c336226 {
    options;
    constructor(options){
        this.options = options;
    }
    execute() {
        const { customElement: customElement, selector: selector, type: type, listener: listener } = this.options;
        const parent = customElement.shadowRoot ?? customElement;
        const elements = parent.querySelectorAll(selector);
        for (const element of elements)(0, $2de2a7cb75073a7c$export$381cfde4b0cf8707)(customElement, element, type, listener);
    }
}


function $0d0af8cdbb6dbf71$export$5cf4efe361e9cc88(superClass) {
    class Mixin_addBindingEventHandlers_Class extends superClass {
        // noinspection JSUnusedGlobalSymbols
        updated(changedProperties) {
            // add the event listeners first so that events dispatched in the update hook can get handled
            $0d0af8cdbb6dbf71$var$addEventListenersForBindings(this);
            super.updated?.(changedProperties);
        }
    }
    return Mixin_addBindingEventHandlers_Class;
}
function $0d0af8cdbb6dbf71$var$addEventListenersForBindings(customElement) {
    const definition = (0, $a6578a6f2ac293b9$export$6dac8c184f86ad18)(customElement);
    const attributes = definition.attributes.attributes;
    if (!attributes) return;
    for (const attribute of attributes)new (0, $384d43e047cea0a9$export$e524338e5c336226)({
        customElement: customElement,
        selector: `[${(0, $a1c562db7d71c001$export$ab01fe353da9eec0)}="${attribute}"]`,
        type: undefined,
        listener: (element, event)=>$0d0af8cdbb6dbf71$var$matchAttributeToInput(element, attribute, event.target)
    }).execute();
}
function $0d0af8cdbb6dbf71$var$matchAttributeToInput(element, attribute, input) {
    element[attribute] = input.type === 'checkbox' ? input.checked ? 'true' : 'false' : input.value;
}




class $5fc6d1830dd8523c$export$bb80cefda670926e {
    options;
    constructor(options){
        this.options = options;
    }
    execute() {
        const { customElement: customElement, type: type, listener: listener } = this.options;
        (0, $2de2a7cb75073a7c$export$381cfde4b0cf8707)(customElement, customElement, type, listener);
    }
}


function $069d966b949b850f$export$613e7e03666394f0(superClass) {
    class Mixin_addEventListenersToRoot_Class extends superClass {
        // noinspection JSUnusedGlobalSymbols
        connectedCallback() {
            // add the event listeners first so that events dispatched in the connected hook can get handled
            $069d966b949b850f$var$addEventListenersToRoot(this);
            super.connectedCallback?.();
        }
    }
    return Mixin_addEventListenersToRoot_Class;
}
function $069d966b949b850f$var$addEventListenersToRoot(customElement) {
    const definition = (0, $a6578a6f2ac293b9$export$6dac8c184f86ad18)(customElement);
    const events = definition.declaration.hooks?.events;
    if (!(events instanceof Array)) return;
    const ops = $069d966b949b850f$var$eventsArrayToOps(customElement, events);
    for (const op of ops)op.execute();
}
function $069d966b949b850f$var$eventsArrayToOps(customElement, events) {
    return events.filter((customaryEvent)=>customaryEvent.selector === undefined).map((customaryEvent)=>new (0, $5fc6d1830dd8523c$export$bb80cefda670926e)({
            customElement: customElement,
            type: customaryEvent.type ?? (()=>{
                throw new Error(`${customElement.tagName.toLowerCase()}: root event listeners` + ' require you to provide an event type');
            })(),
            listener: customaryEvent.listener
        }));
}




function $9598cbb861ba1406$export$df9abe8620b74c44(superClass) {
    class Mixin_addEventListenersToUpdatedDescendants_Class extends superClass {
        // noinspection JSUnusedGlobalSymbols
        updated(changedProperties) {
            // add the event listeners first so that events dispatched in the update hook can get handled
            $9598cbb861ba1406$var$addEventListenersToUpdatedDescendants(this);
            super.updated?.(changedProperties);
        }
    }
    return Mixin_addEventListenersToUpdatedDescendants_Class;
}
function $9598cbb861ba1406$var$addEventListenersToUpdatedDescendants(customElement) {
    const definition = (0, $a6578a6f2ac293b9$export$6dac8c184f86ad18)(customElement);
    const events = definition.declaration.hooks?.events;
    if (!events) return;
    const ops = events instanceof Array ? $9598cbb861ba1406$var$eventsArrayToOps(customElement, events) : $9598cbb861ba1406$var$eventsRecordToOps(customElement, events);
    for (const op of ops)op.execute();
}
function $9598cbb861ba1406$var$eventsArrayToOps(customElement, events) {
    return events.filter((customaryEvent)=>customaryEvent.selector !== undefined).map((customaryEvent)=>new (0, $384d43e047cea0a9$export$e524338e5c336226)({
            customElement: customElement,
            selector: customaryEvent.selector,
            type: customaryEvent.type,
            listener: customaryEvent.listener
        }));
}
function $9598cbb861ba1406$var$eventsRecordToOps(customElement, events) {
    return Object.entries(events).map(([selector, listener])=>new (0, $384d43e047cea0a9$export$e524338e5c336226)({
            customElement: customElement,
            selector: selector,
            type: undefined,
            listener: listener
        }));
}





function $d1f471c42208303b$export$3bf0fa7e728730a3(superClass) {
    class Mixin_adoptStyleSheet_Class extends superClass {
        // noinspection JSUnusedGlobalSymbols
        connectedCallback() {
            super.connectedCallback?.();
            const definition = (0, $a6578a6f2ac293b9$export$6dac8c184f86ad18)(this);
            this.link_external_css(definition);
            this.link_fonts(definition);
        }
        link_external_css(definition) {
            if (definition.templateInDocument) return;
            const declaration = definition.declaration;
            if (declaration.hooks?.externalLoader?.css_dont) return;
            const import_meta = (0, $f83be5948bd06259$export$b822a0ad0f6e4c40)(declaration);
            const name = declaration.name;
            const location = (0, $ee240c89551fb5d5$export$de7ab7265d436fa0)({
                import_meta: import_meta,
                name: name,
                extension: 'css'
            });
            const shadowRoot = $d1f471c42208303b$var$findNearestShadowRoot(this);
            $d1f471c42208303b$var$appendLinkElement(shadowRoot || document, {
                href: location,
                id: name
            });
        }
        /**
		 * adopter of font stylesheets can only be the root document dom, not the shadow dom.
		 * @see https://github.com/microsoft/vscode/issues/159877#issuecomment-1262843952
		 * @see https://github.com/mdn/interactive-examples/issues/887#issuecomment-432606925
		 */ link_fonts(definition) {
            const declaration = definition.declaration;
            const locations = (0, $f83be5948bd06259$export$68c38d987afcbfba)(declaration);
            if (!locations) return;
            for (const location of locations)$d1f471c42208303b$var$appendLinkElement(document, {
                href: location,
                id: `customary-fontLocation-${location}`
            });
        }
    }
    return Mixin_adoptStyleSheet_Class;
}
function $d1f471c42208303b$var$appendLinkElement(host, options) {
    const id = options.id;
    const exists = host instanceof ShadowRoot ? host.getElementById(id) : host.getElementById(id);
    if (exists) return;
    const node = host instanceof ShadowRoot ? host : host.head;
    const linkElement = document.createElement('link');
    linkElement.href = options.href;
    linkElement.id = id;
    linkElement.rel = 'stylesheet';
    linkElement.type = 'text/css';
    node.appendChild(linkElement);
}
function $d1f471c42208303b$var$findNearestShadowRoot(element) {
    if (element.shadowRoot) return element.shadowRoot;
    let parentNode = element.parentNode;
    while(parentNode){
        if (parentNode instanceof ShadowRoot) return parentNode;
        parentNode = parentNode.parentNode;
    }
    return null;
}



function $2f505a9241dbdaaf$export$38b25fab905694b5(superClass) {
    class Mixin_attributeChangedCallback_Class extends superClass {
        // noinspection JSUnusedGlobalSymbols
        attributeChangedCallback(name, oldValue, newValue) {
            super.attributeChangedCallback(name, oldValue, newValue);
            const definition = (0, $a6578a6f2ac293b9$export$6dac8c184f86ad18)(this);
            definition.declaration.hooks?.dom?.attributeChangedCallback?.(this, name, oldValue, newValue);
        }
    }
    return Mixin_attributeChangedCallback_Class;
}



function $68c41a7f90dfd20d$export$d321c1d718f409fd(superClass) {
    class Mixin_connected_Class extends superClass {
        // noinspection JSUnusedGlobalSymbols
        connectedCallback() {
            super.connectedCallback?.();
            const definition = (0, $a6578a6f2ac293b9$export$6dac8c184f86ad18)(this);
            definition.declaration.hooks?.lifecycle?.connected?.(this);
        }
    }
    return Mixin_connected_Class;
}



function $fd54020cbaa519b8$export$2cfc5030c386ebbd(superClass) {
    class Mixin_disconnected_Class extends superClass {
        // noinspection JSUnusedGlobalSymbols
        disconnectedCallback() {
            super.disconnectedCallback?.();
            const definition = (0, $a6578a6f2ac293b9$export$6dac8c184f86ad18)(this);
            definition.declaration.hooks?.lifecycle?.disconnected?.(this);
        }
    }
    return Mixin_disconnected_Class;
}



function $d2c535d050b19a85$export$768be97ad3d2f262(superClass) {
    class Mixin_firstUpdated_Class extends superClass {
        // noinspection JSUnusedGlobalSymbols
        firstUpdated(changedProperties) {
            super.firstUpdated?.(changedProperties);
            const definition = (0, $a6578a6f2ac293b9$export$6dac8c184f86ad18)(this);
            const { lifecycle: lifecycle, changes: changes } = definition.declaration.hooks ?? {};
            lifecycle?.firstUpdated?.(this, changedProperties);
            if (changes instanceof Array) for (const change of changes){
                const { name: name, firstUpdated: firstUpdated } = change;
                if (firstUpdated && changedProperties.has(name)) firstUpdated(this, this[name], changedProperties.get(name));
            }
        }
    }
    return Mixin_firstUpdated_Class;
}



/**
 * https://github.com/lit/lit/blob/43c6168acc4a30d70091ee30c307f692a02387d5/packages/lit-html/src/lit-html.ts#L688
 * https://github.com/lit/lit/blob/43c6168acc4a30d70091ee30c307f692a02387d5/packages/lit-html/src/test/lit-html_test.ts#L3200-L3218
 * https://github.com/lit/lit/pull/3987/files#diff-bead45bb43cda474d916704550a1b26322667aa42b814c48300b05be79b9a7ebR595
 * https://github.com/lit/lit/pull/2307/files#diff-91d82786d99da1716b8b2e02534f0e967e9b7f2f539acb7b712f6900094b6263
 */ const $e6f95737aae637f4$var$KEY = '__customary__immutable_TemplateStringsArray_instances';
function $e6f95737aae637f4$export$75299ef9530cddf3(element, template) {
    const immutables = element[$e6f95737aae637f4$var$KEY];
    if (!immutables) {
        element[$e6f95737aae637f4$var$KEY] = [
            template.strings
        ];
        return;
    }
    const existing = immutables.find((strings)=>$e6f95737aae637f4$var$areReadonlyArraysEqual(strings, template.strings));
    if (!existing) immutables.push(template.strings);
    else // reuse the original array instance, otherwise the template will rerender
    template.strings = existing;
}
function $e6f95737aae637f4$var$areReadonlyArraysEqual(a, b) {
    if (a.length !== b.length) return false;
    for(let i = 0; i < a.length; i++){
        if (a[i] !== b[i]) return false;
    }
    return true;
}


function $a138db3e204519a1$export$978d44c3a7957bab(element, htmlString, state) {
    function customary_lit_html_track(html_output) {
        (0, $e6f95737aae637f4$export$75299ef9530cddf3)(element, html_output);
        return html_output;
    }
    const thisArg = element;
    const fn = new Function('customary_lit_html_track', 'state', 'html', 'choose', 'map', 'repeat', 'when', '"use strict"; return customary_lit_html_track( html\`' + htmlString + '\`' + ' )');
    return fn.call(thisArg, customary_lit_html_track, state, (0, $34c890d2bba8533a$export$c0bb0b647f701bb5), (0, $36ba9077c37f6d69$export$7877a478dd30fd3d), (0, $2df088f3943a4311$export$871de8747c9eaa88), (0, $e2b607c6d10b582c$export$76d90c956114f2c2), (0, $5114a2a7e9d58c35$export$a55877ca9db47377));
}



function $f3d00108616e5be0$export$b1f65ab33c708f24(superClass) {
    class Mixin_renderFromTemplate_Class extends superClass {
        // noinspection JSUnusedGlobalSymbols
        render() {
            const definition = (0, $a6578a6f2ac293b9$export$6dac8c184f86ad18)(this);
            return (0, $a138db3e204519a1$export$978d44c3a7957bab)(this, definition.immutable_htmlString, this.state);
        }
    }
    return Mixin_renderFromTemplate_Class;
}



function $adb7a522f246ac7a$export$2b1301cd2cb0c945(superClass) {
    class Mixin_slotChange_Class extends superClass {
        // noinspection JSUnusedGlobalSymbols
        firstUpdated(changedProperties) {
            super.firstUpdated(changedProperties);
            const element = this;
            const definition = (0, $a6578a6f2ac293b9$export$6dac8c184f86ad18)(element);
            const slotchange = definition.declaration.hooks?.slots?.slotchange;
            if (!slotchange) return;
            // on first render, execute once for the first time without an event
            slotchange(element);
            /*
					https://stackoverflow.com/questions/67332635/slots-does-not-work-on-a-html-web-component-without-shadow-dom
					*/ element.shadowRoot.addEventListener('slotchange', (event)=>slotchange(element, event));
        }
    }
    return Mixin_slotChange_Class;
}



function $e62fef1729ff12df$export$73d040748d682301(superClass) {
    class Mixin_state_Class extends superClass {
        constructor(...args){
            super(args);
            const definition = (0, $a6578a6f2ac293b9$export$6dac8c184f86ad18)(this);
            const { values: values } = definition.declaration;
            if (!values) return;
            Object.assign(this, values);
        }
        // noinspection JSUnusedGlobalSymbols
        setState(state_or_fn) {
            $e62fef1729ff12df$var$_setState(state_or_fn, ()=>this.state, (state)=>this.state = state);
        }
    }
    return Mixin_state_Class;
}
function $e62fef1729ff12df$var$_setState(state_or_fn, getStateFn, setStateFn) {
    if (state_or_fn === null || state_or_fn === undefined) return;
    const _state = getStateFn();
    const state = state_or_fn instanceof Function ? state_or_fn(_state) : state_or_fn;
    setStateFn(typeof _state === 'object' ? {
        ..._state,
        ...state
    } : state);
}



function $16ab248eb66956f2$export$2c20b62da00ad27c(superClass) {
    class Mixin_updated_Class extends superClass {
        // noinspection JSUnusedGlobalSymbols
        updated(changedProperties) {
            super.updated?.(changedProperties);
            $16ab248eb66956f2$var$postUpdate(this, changedProperties);
        }
    }
    return Mixin_updated_Class;
}
function $16ab248eb66956f2$var$postUpdate(customElement, changedProperties) {
    const definition = (0, $a6578a6f2ac293b9$export$6dac8c184f86ad18)(customElement);
    const { lifecycle: lifecycle, changes: changes } = definition.declaration.hooks ?? {};
    lifecycle?.updated?.(customElement, changedProperties);
    if (changes instanceof Array) for (const change of changes){
        const { name: name, updated: updated } = change;
        if (updated && changedProperties.has(name)) updated(customElement, customElement[name], changedProperties.get(name));
    }
    else for(const name in changes){
        const updated = changes[name];
        if (changedProperties.has(name)) updated(customElement, customElement[name], changedProperties.get(name));
    }
}



function $a4f30597a6143fad$export$441bf0c9f46b950d(superClass) {
    class Mixin_willUpdate_Class extends superClass {
        // noinspection JSUnusedGlobalSymbols
        willUpdate(changedProperties) {
            super.willUpdate?.(changedProperties);
            const definition = (0, $a6578a6f2ac293b9$export$6dac8c184f86ad18)(this);
            const { lifecycle: lifecycle, changes: changes } = definition.declaration.hooks ?? {};
            lifecycle?.willUpdate?.(this, changedProperties);
            if (changes instanceof Array) for (const change of changes){
                const { name: name, willUpdate: willUpdate } = change;
                if (willUpdate && changedProperties.has(name)) willUpdate(this, this[name], changedProperties.get(name));
            }
        }
    }
    return Mixin_willUpdate_Class;
}



class $98d0f6a447871cb0$export$4a183080d2c522d7 extends (0, $0d0af8cdbb6dbf71$export$5cf4efe361e9cc88)((0, $069d966b949b850f$export$613e7e03666394f0)((0, $9598cbb861ba1406$export$df9abe8620b74c44)((0, $d1f471c42208303b$export$3bf0fa7e728730a3)((0, $2f505a9241dbdaaf$export$38b25fab905694b5)((0, $68c41a7f90dfd20d$export$d321c1d718f409fd)((0, $fd54020cbaa519b8$export$2cfc5030c386ebbd)((0, $d2c535d050b19a85$export$768be97ad3d2f262)((0, $f3d00108616e5be0$export$b1f65ab33c708f24)((0, $adb7a522f246ac7a$export$2b1301cd2cb0c945)((0, $e62fef1729ff12df$export$73d040748d682301)((0, $16ab248eb66956f2$export$2c20b62da00ad27c)((0, $a4f30597a6143fad$export$441bf0c9f46b950d)((0, $d812c34aed91105d$export$3f2f9f5909897157)))))))))))))) {
    constructor(){
        try {
            super();
        } catch (error) {
            if (error instanceof TypeError) {
                if (error.message.startsWith("Illegal constructor")) throw new Error("Custom element must be fully defined before you can instantiate it. Try this:\n    await Customary.untilDefined(MyCustomElement);\n    const element = new MyCustomElement();", {
                    cause: error
                });
            }
            throw error;
        }
    }
    createRenderRoot() {
        const definition = (0, $a6578a6f2ac293b9$export$6dac8c184f86ad18)(this);
        if (definition.declaration.config?.construct?.shadowRootDont) return this;
        return super.createRenderRoot();
    }
}


class $dc3eede01c452bc5$export$7d556906c4a5f4a7 {
    // noinspection JSUnusedGlobalSymbols
    static async autodetect() {
        await this.detect();
        const customaryRegistry = (0, $d29bea016259bab1$export$d37a9068d840d1de).singleton();
        await customaryRegistry.settle();
    }
    // noinspection JSUnusedGlobalSymbols
    static declare(constructor) {
        const customaryRegistry = (0, $d29bea016259bab1$export$d37a9068d840d1de).singleton();
        customaryRegistry.declare(constructor, constructor?.customary);
    }
    // noinspection JSUnusedGlobalSymbols
    static async untilDefined(constructor) {
        const customaryRegistry = (0, $d29bea016259bab1$export$d37a9068d840d1de).singleton();
        return await customaryRegistry.untilDefined(constructor);
    }
    static async detect() {
        const customaryRegistry = (0, $d29bea016259bab1$export$d37a9068d840d1de).singleton();
        const detector = new (0, $16878b9af4c78a4c$export$2bcc17fb5433cbbf)(document, globalThis);
        const declarations = detector.detect();
        const promises = declarations.map((declaration)=>customaryRegistry.declare(class EphemeralCustomaryElement extends (0, $98d0f6a447871cb0$export$4a183080d2c522d7) {
            }, declaration));
        await Promise.all(promises);
    }
}




$parcel$exportWildcard($07201b47c5f8d57a$exports, $6b52b5e2005fdcd9$exports);


document.addEventListener("DOMContentLoaded", (event)=>{
    if (!globalThis[`customary-options:autodetect-dont`]) (0, $dc3eede01c452bc5$export$7d556906c4a5f4a7).autodetect();
});


export {$dc3eede01c452bc5$export$7d556906c4a5f4a7 as Customary, $98d0f6a447871cb0$export$4a183080d2c522d7 as CustomaryElement, $d812c34aed91105d$export$3f2f9f5909897157 as LitElement, $34c890d2bba8533a$export$c0bb0b647f701bb5 as html, $36ba9077c37f6d69$export$7877a478dd30fd3d as choose, $2df088f3943a4311$export$871de8747c9eaa88 as map, $e2b607c6d10b582c$export$76d90c956114f2c2 as repeat, $5114a2a7e9d58c35$export$a55877ca9db47377 as when};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
